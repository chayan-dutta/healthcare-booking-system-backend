name: Publish Common NuGet Packages

on:
  push:
    branches:
      - master
    paths:
      - "HealthCare.Common/**"
  pull_request:
    branches:
      - master
    paths:
      - "HealthCare.Common/**"
  workflow_dispatch:

jobs:
  build-and-publish:
    runs-on: windows-latest

    steps:
      # 1. Checkout
      - name: Checkout
        uses: actions/checkout@v4

      # 2. Setup .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      # 3. Find all csproj inside HealthCare.Common
      - name: Find csproj files
        id: find_projects
        shell: pwsh
        run: |
          $projects = Get-ChildItem HealthCare.Common -Recurse -Filter *.csproj | ForEach-Object { $_.FullName }
          $projectsString = $projects -join ';'
          echo "projects=$projectsString" >> $env:GITHUB_OUTPUT

      # 4. Bump version for all (PowerShell version)
      - name: Bump version
        id: version
        shell: pwsh
        run: |
          $versionFile = "HealthCare.Common/Directory.Build.props"

          if (-not (Test-Path $versionFile)) {
            '<?xml version="1.0" encoding="utf-8"?><Project><PropertyGroup><Version>1.0.0</Version></PropertyGroup></Project>' | Out-File $versionFile -Encoding utf8
          }

          [xml]$xml = Get-Content $versionFile
          $currentVersion = $xml.Project.PropertyGroup.Version
          if (-not $currentVersion) { $currentVersion = "1.0.0" }

          $parts = $currentVersion.Split('.')
          $major = [int]$parts[0]
          $minor = [int]$parts[1]
          $patch = [int]$parts[2] + 1
          $newVersion = "$major.$minor.$patch"

          $xml.Project.PropertyGroup.Version = $newVersion
          $xml.Save($versionFile)

          echo "version=$newVersion" >> $env:GITHUB_OUTPUT

      # 5. Restore & Build all projects
      - name: Restore
        run: dotnet restore HealthCare.Common/HealthCare.Common.sln

      - name: Build
        run: dotnet build HealthCare.Common/HealthCare.Common.sln -c Release --no-restore

      # 6. Pack each project
      - name: Pack projects
        shell: pwsh
        run: |
          mkdir ./nupkgs
          $projects = "${{ steps.find_projects.outputs.projects }}".Split(';')
          foreach ($proj in $projects) {
            Write-Output "Packing $proj"
            dotnet pack "$proj" -c Release -o ./nupkgs /p:PackageVersion=${{ steps.version.outputs.version }} --no-build
          }

      # Install NuGet CLI
      - name: Install NuGet
        run: |
          Invoke-WebRequest https://dist.nuget.org/win-x86-commandline/latest/nuget.exe -OutFile nuget.exe

      # 7. Configure Azure Artifacts feed
      - name: Add Azure Artifacts source
        run: |
          ./nuget.exe sources Remove -Name "HealthCareFeed" || true
          ./nuget.exe sources Add -Name "HealthCareFeed" `
            -Source "https://pkgs.dev.azure.com/${{ secrets.AZURE_ORG }}/${{ secrets.AZURE_PROJECT }}/_packaging/${{ secrets.AZURE_FEED_NAME }}/nuget/v3/index.json" `
            -Username "healthcarefeed" `
            -Password "${{ secrets.AZURE_FEED_PAT }}" `
            -StorePasswordInClearText
      # Push packages using nuget.exe
      - name: Push NuGet packages
        run: |
          ./nuget.exe push "./nupkgs/*.nupkg" -Source "HealthCareFeed" -ApiKey az -SkipDuplicate
